matches:
  - triggers:
      - ":up "
      - "up_ "
      - ":uppercase "
      - "uppercase_ "
    label: "Change Case: UPPERCASE"
    replace: "{{output}}"
    vars:
      - name: output
        type: shell
        params:
          shell: powershell
          cmd: "Get-Clipboard | ForEach-Object { $_.ToUpper() }"

  - triggers:
      - ":low "
      - "low_ "
      - ":lowercase "
      - "lowercase_ "
    label: "Change Case: lowercase"
    replace: "{{output}}"
    vars:
      - name: output
        type: shell
        params:
          shell: powershell
          cmd: "Get-Clipboard | ForEach-Object { $_.ToLower() }"

  - triggers:
      - ":tit "
      - "tit_ "
      - ":title "
      - "title_ "
      - ":titlecase "
      - "titlecase_ "
    label: "Change Case: Title Case"
    replace: "{{output}}"
    vars:
      - name: output
        type: shell
        params:
          shell: powershell
          cmd: |
            $t = Get-Clipboard
            $words = $t -split ' '
            $title = $words | ForEach-Object {
              if ($_ -ne '') {
                $_.Substring(0,1).ToUpper() + $_.Substring(1).ToLower()
              }
            }
            $title -join ' '

  - triggers:
      - ":sent "
      - "sent_ "
      - ":sentence "
      - "sentence_ "
      - ":first "
      - "first_ "
    label: "Change Case: Sentence Case"
    replace: "{{output}}"
    vars:
      - name: output
        type: shell
        params:
          shell: powershell
          cmd: |
            $t = Get-Clipboard
            $regex = '(?<=[.?!]\s)(\w)'
            $t = $t.ToLower()
            $t = $t.Substring(0,1).ToUpper() + $t.Substring(1)
            $t = [regex]::Replace($t, $regex, { param($m) $m.Value.ToUpper() })
            $t

  - triggers:
      - ":func "
      - "func_ "
      - ":function "
      - "function_ "
    label: "Change Case: camelCase (Function Name)"
    replace: "{{output}}"
    vars:
      - name: output
        type: shell
        params:
          shell: powershell
          cmd: |
            $t = Get-Clipboard
            $words = $t.Split(' ')
            $first = $words[0].ToLower()
            $rest = $words[1..($words.Length - 1)] | ForEach-Object { $_.Substring(0,1).ToUpper() + $_.Substring(1).ToLower() }
            Write-Output ($first + ($rest -join ''))

  - triggers:
      - ":code "
      - "code_ "
      - ":var "
      - "var_ "
      - ":variable "
      - "variable_ "
      - ":snake "
      - "snake_ "
    label: "Change Case: snake_case (Code Variable)"
    replace: "{{output}}"
    vars:
      - name: output
        type: shell
        params:
          shell: powershell
          cmd: |
            $t = Get-Clipboard
            $s = $t.ToLower() -replace '[^a-z0-9]+','_'
            Write-Output ($s.Trim('_'))

  - triggers:
      - ":slug "
      - "slug_ "
      - ":dash "
      - "dash_ "
    label: "Change Case: slug-case"
    replace: "{{output}}"
    vars:
      - name: output
        type: shell
        params:
          shell: powershell
          cmd: |
            $t = Get-Clipboard
            $t = $t.ToLower() -replace '[^a-z0-9\s]', ''
            $t = $t -replace '\s+', '-'
            $t.Trim('-')

  - triggers:
      - ":new "
      - "new_ "
      - ":nl "
      - "nl_ "
      - ":newline "
      - "newline_ "
    label: "Clean Text: Remove new lines"
    replace: "{{output}}"
    vars:
      - name: output
        type: shell
        params:
          shell: powershell
          cmd: |
            $t = Get-Clipboard
            $t = $t -replace "(\r|\n)+", " "
            $t = $t -replace '\s+', ' '
            $t = $t.Trim()
            $t

  - triggers:
      - ":clean "
      - "clean_ "
      - ":cl "
      - "cl_ "
      - ":clear "
      - "clear_ "
    label: "Clean Text: Remove punctuation"
    replace: "{{output}}"
    vars:
      - name: output
        type: shell
        params:
          shell: powershell
          cmd: |
            $t = Get-Clipboard
            $t = $t -replace '[.,;:\-_]', ' '
            $t = $t -replace '[^\w\s]', ''
            $t = $t -replace '\s+', ' '
            $t = $t.Trim()
            $t

  - triggers:
      - ":space "
      - "space_ "
      - ":s "
      - "s_ "
    label: "Clean Text: Remove extra spaces"
    replace: "{{output}}"
    vars:
      - name: output
        type: shell
        params:
          shell: powershell
          cmd: |
            $t = Get-Clipboard
            $t = $t -replace '\s+', ' '
            $t = $t.Trim()
            $t

  - triggers:
      - "-:br "
      - "-br_ "
    label: "Clean HTML: Remove br tags"
    replace: "{{output}}"
    vars:
      - name: output
        type: shell
        params:
          shell: powershell
          cmd: |
            $t = Get-Clipboard
            $t = $t -replace '<br\s*/?>', ' '
            $t = $t -replace "(\r|\n)+", ' '
            $t = $t -replace '\s+', ' '
            $t = $t.Trim()
            $t

  - triggers:
      - ":count "
      - "count_ "
      - ":word "
      - "word_ "
    label: "Text: Clipboard Info"
    replace: "{{output}}"
    vars:
      - name: output
        type: shell
        params:
          shell: powershell
          cmd: |
            $t = Get-Clipboard
            $words = ($t -split '\s+' | Where-Object { $_ -ne '' }).Count
            $chars = $t.Length
            $lines = ($t -split "(\r?\n)").Count
            $readingTime = [math]::Ceiling($words / 200)
            "Words: $words | Characters: $chars | Lines: $lines | Est. Reading Time: $readingTime min"

  - triggers:
      - ":qd "
      - "qd_ "
      - ":double "
      - "double_ "
    label: "Text: Convert double quotes"
    replace: "{{output}}"
    vars:
      - name: output
        type: shell
        params:
          shell: powershell
          cmd: |
            $t = Get-Clipboard
            $t = $t -replace '`', '"'
            $t = $t -replace "'", '"'
            $t

  - triggers:
      - ":q "
      - "q_ "
      - ":single "
      - "single_ "
      - ":quote "
      - "quote_ "
    label: "Text: Convert single quotes"
    replace: "{{output}}"
    vars:
      - name: output
        type: shell
        params:
          shell: powershell
          cmd: |
            $t = Get-Clipboard
            $t = $t -replace '`', "'"
            $t = $t -replace '"', "'"
            $t

  - triggers:
      - ":qr "
      - "qr_ "
      - ":reverse "
      - "reverse_ "
    label: "Text: Convert quotes to backticks ( Reverse Quotes ` )"
    replace: "{{output}}"
    vars:
      - name: output
        type: shell
        params:
          shell: powershell
          cmd: |
            $t = Get-Clipboard
            $t = $t -replace '"', '`'
            $t = $t -replace "'", '`'
            $t
